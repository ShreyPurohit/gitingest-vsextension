name: Release & Publish

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      working-directory:
        description: 'Working directory for the project'
        required: false
        type: string
        default: '.'
      skip-duplicate:
        description: 'Skip duplicate releases'
        required: false
        type: boolean
        default: true
      dry-run:
        description: 'Perform a dry run without publishing'
        required: false
        type: boolean
        default: false
    secrets:
      VSCE_PAT:
        description: 'VS Code Extension Personal Access Token'
        required: true
      OVSX_PAT:
        description: 'Open VSX Personal Access Token'
        required: true

jobs:
  release:
    name: Release & Publish Extension
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
          
      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: ${{ inputs.working-directory }}/dist
          
      - name: Install VSCE (VS Code Extension Manager)
        run: npm install -g @vscode/vsce
        
      - name: Prepare release package
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "üì¶ Preparing release package"
          
          # Verify build artifacts exist
          if [ ! -f "dist/extension.js" ]; then
            echo "‚ùå Extension build not found"
            exit 1
          fi
          
          # List contents for debugging
          echo "üìÅ Build contents:"
          ls -la dist/
          
          # Validate package before publishing
          vsce package --no-dependencies
          echo "‚úÖ Extension package created successfully"
          
      - name: Publish to VS Code Marketplace
        if: ${{ !inputs.dry-run }}
        working-directory: ${{ inputs.working-directory }}
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          echo "üöÄ Publishing to VS Code Marketplace"
          if [ "${{ inputs.skip-duplicate }}" = "true" ]; then
            vsce publish --no-dependencies --skip-duplicate
          else
            vsce publish --no-dependencies
          fi
          
      - name: Publish to Open VSX Registry
        if: ${{ !inputs.dry-run }}
        working-directory: ${{ inputs.working-directory }}
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          echo "üöÄ Publishing to Open VSX Registry"
          npx ovsx publish *.vsix -p $OVSX_PAT
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/') && !inputs.dry-run
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          
      - name: Upload Extension Package to Release
        if: startsWith(github.ref, 'refs/tags/') && !inputs.dry-run
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ inputs.working-directory }}/*.vsix
          asset_name: extension.vsix
          asset_content_type: application/zip
          
      - name: Dry Run Summary
        if: inputs.dry-run
        run: |
          echo "üîç DRY RUN COMPLETED"
          echo "‚úÖ Extension would be published successfully"
          echo "üì¶ Package validation passed"
          echo "üöÄ Ready for production release"