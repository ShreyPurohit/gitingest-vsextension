name: Compatibility Testing

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      working-directory:
        description: 'Working directory for the project'
        required: false
        type: string
        default: '.'
      test-variants:
        description: 'JSON array of test variants'
        required: false
        type: string
        default: '["stable", "insiders"]'

jobs:
  compatibility-test:
    name: Test VS Code ${{ matrix.variant }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: ${{ fromJson(inputs.test-variants) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
          
      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: ${{ inputs.working-directory }}/dist
          
      - name: Install VS Code ${{ matrix.variant }}
        run: |
          if [ "${{ matrix.variant }}" = "insiders" ]; then
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
            sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
            sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
            sudo apt update
            sudo apt install code-insiders
          else
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
            sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
            sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
            sudo apt update
            sudo apt install code
          fi
          
      - name: Run extension tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "üß™ Testing extension with VS Code ${{ matrix.variant }}"
          
          # Verify the extension was built
          if [ -f "dist/extension.js" ]; then
            echo "‚úÖ Extension build found"
          else
            echo "‚ùå Extension build not found"
            exit 1
          fi
          
          # Check if extension can be loaded (basic syntax check)
          node -c dist/extension.js
          echo "‚úÖ Extension syntax validation passed"
          
          # If you have actual tests, run them here
          # npm test
          
          echo "‚úÖ Compatibility test passed for VS Code ${{ matrix.variant }}"
          
      - name: Validate package.json for VS Code
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "üì¶ Validating VS Code extension package.json"
          
          # Check required fields
          if ! jq -e '.engines.vscode' package.json > /dev/null; then
            echo "‚ùå Missing engines.vscode in package.json"
            exit 1
          fi
          
          if ! jq -e '.main' package.json > /dev/null; then
            echo "‚ùå Missing main entry point in package.json"
            exit 1
          fi
          
          if ! jq -e '.activationEvents' package.json > /dev/null; then
            echo "‚ùå Missing activationEvents in package.json"
            exit 1
          fi
          
          if ! jq -e '.contributes' package.json > /dev/null; then
            echo "‚ùå Missing contributes section in package.json"
            exit 1
          fi
          
          echo "‚úÖ Package.json validation successful"